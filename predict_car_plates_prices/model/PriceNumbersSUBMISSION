# -*- coding: utf-8 -*-
"""PriceNumbers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOG0rorhFXmTE_PgfS5yCzpaNAyvM8QB
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler
from catboost import CatBoostRegressor
import xgboost as xgb
from sklearn.model_selection import GridSearchCV


data = pd.read_csv("/home/malek1t/ML.-KAGGLE/predict_car_plates_prices/data/train.csv", index_col=False)
current_data = datetime.now()



def data_transform(date_in_data):
    difference_in_time = str(current_data - datetime.strptime(date_in_data, "%Y-%m-%d %H:%M:%S")).split()[0]
    return int(difference_in_time)
data["date"] = data["date"].apply(data_transform)


data = data.loc[data.groupby("plate")["date"].idxmin()]


data["Triplet_letters"] = 0
data["Double_letters"] = 0
data["Single_letters"] = 0
data["Sixtet_numbers"] = 0
data["Kvintet_numbers"] = 0
data["Quartet_number"] = 0
data["Triplet_numbers"] = 0
data["Doublet_numbers"] = 0
data["Singlet_numbers"] = 0

for index, plate_in in data[["id", "plate"]].iterrows():
    letter_count = {}
    number_count = {}

    for char in plate_in['plate']:
        if char.isdigit():
            number_count[char] = number_count.get(char, 0) + 1
        else:
            letter_count[char] = letter_count.get(char, 0) + 1

    for let, seq in letter_count.items():
        if seq == 3:
            data.loc[index, "Triplet_letters"] += 1
        elif seq == 2:
            data.loc[index, "Double_letters"] += 1
        elif seq == 1:
            data.loc[index, "Single_letters"] += 1

    for num, seq in number_count.items():
        if seq == 6:
            data.loc[index, "Sixtet_numbers"] += 1
        elif seq == 5:
            data.loc[index, "Kvintet_numbers"] += 1
        elif seq == 4:
            data.loc[index, "Quartet_number"] += 1
        elif seq == 3:
            data.loc[index, "Triplet_numbers"] += 1
        elif seq == 2:
            data.loc[index, "Doublet_numbers"] += 1
        elif seq == 1:
            data.loc[index, "Singlet_numbers"] += 1

    data.shape
    letter_count.clear()
    number_count.clear()


data = data.drop(["id", "plate", "date"], axis=1)
data, y = data.drop(["price"], axis=1), data["price"]
#MMS = MinMaxScaler()
#data_transform = MMS.fit_transform(data)
#data = pd.DataFrame(data=data_transform, columns=data.columns)






dtest_data = pd.read_csv("test.csv")
tt = test_data.copy()

test_data["Triplet_letters"] = 0
test_data["Double_letters"] = 0
test_data["Single_letters"] = 0
test_data["Sixtet_numbers"] = 0
test_data["Kvintet_numbers"] = 0
test_data["Quartet_number"] = 0
test_data["Triplet_numbers"] = 0
test_data["Doublet_numbers"] = 0
test_data["Singlet_numbers"] = 0

for index, plate_in in enumerate(test_data["plate"]):
    letter_count = {}
    number_count = {}

    for char in plate_in:
        if char.isdigit():
            number_count[char] = number_count.get(char, 0) + 1
        else:
            letter_count[char] = letter_count.get(char, 0) + 1

    for let, seq in letter_count.items():

        if seq == 3:
            test_data.at[index, "Triplet_letters"] += 1
        elif seq == 2:
            test_data.at[index, "Double_letters"] += 1
        elif seq == 1:
            test_data.at[index, "Single_letters"] += 1

    for num, seq in number_count.items():

        if seq == 6:
            test_data.at[index, "Sixtet_numbers"] += 1
        elif seq == 5:
            test_data.at[index, "Kvintet_numbers"] += 1
        elif seq == 4:
            test_data.at[index, "Quartet_number"] += 1
        elif seq == 3:
            test_data.at[index, "Triplet_numbers"] += 1
        elif seq == 2:
            test_data.at[index, "Doublet_numbers"] += 1
        elif seq == 1:
            test_data.at[index, "Singlet_numbers"] += 1

    test_data.shape
    letter_count.clear()
    number_count.clear()



test_data = test_data.drop(["id", "plate", "date", "price"], axis=1)

rfs = RandomForestRegressor(max_depth=20, min_samples_leaf=2, min_samples_split=20, n_estimators=10)
rfs.fit(data, y)

tt["price"] = rfs.predict(test_data)
tt = tt.drop(["plate", "date"], axis=1)
tt.to_csv("Result.csv", index=False)